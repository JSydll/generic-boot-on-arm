#!/usr/bin/env python3

import subprocess
import os
import re
import sys
import struct

_EFIBOOTMGR: str = "efibootmgr"
_EFIVAR_TOOL: str = "/usr/bin/u-boot-efivar-tool"


def run_command(cmd: str) -> str:
    """Run a shell command and return its output."""
    process = subprocess.run(
        cmd, shell=True, capture_output=True, text=True, check=True)
    return process.stdout


def parse(output: str) -> tuple[str | None, str | None]:
    """Parse the output of efibootmgr command."""
    boot_next = None
    boot_order = None

    for line in output.splitlines():
        if line.startswith("BootNext:"):
            boot_next = line.split(":")[1].strip()
        elif line.startswith("BootOrder:"):
            boot_order = line.split(":")[1].strip()

    return boot_next, boot_order


def sync(boot_next, boot_order, efivars_file):
    """Set the EFI variables using u-boot's efivar tool (little endian)."""
    if boot_order:
        order_values = [int(x, 16) for x in boot_order.split(",")]
        # Limit to the first two entries - others might be autogenerated entries not of interest
        if len(order_values) == 1:
            order_bytes = struct.pack("<H", order_values[0])
            type_flag = "u16"
        elif len(order_values) >= 2:
            order_bytes = struct.pack("<2H", *order_values[:2])
            type_flag = "u32"
        else:
            raise RuntimeError("BootOrder is empty")
        run_command(
            f"{_EFIVAR_TOOL} set -n BootOrder -i {efivars_file} -t {type_flag} -d {int.from_bytes(order_bytes, 'little')}")
    if boot_next:
        boot_next_value = int(boot_next, 16)
        run_command(
            f"{_EFIVAR_TOOL} set -n BootNext -i {efivars_file} -t u16 -d {boot_next_value}")


def main():
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <efivars_file>")
        return 2
    efivars_file = sys.argv[1]
    try:
        output = run_command(_EFIBOOTMGR)
        boot_next, boot_order = parse(output)
        sync(boot_next, boot_order, efivars_file)
        print("Successfully synchronized EFI boot variables.")
    except Exception as e:
        print(f"Error: {str(e)}")
        return 1
    return 0


if __name__ == "__main__":
    exit(main())
